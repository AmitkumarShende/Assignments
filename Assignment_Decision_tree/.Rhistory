prop.table(table(agreement_polydot))
library(caret)
library(ggplot2)
#Visualization
# Plot and ggplot
ggplot(data=salary_train,aes(x=salary_train$Salary, y = salary_train$age, fill = salary_train$Salary)) +
geom_boxplot() +
ggtitle("Box Plot")
plot(salary_train$workclass,salary_train$Salary)
plot(salary_train$maritalstatus,salary_train$Salary)
ggplot(data=salary_train,aes(x = salary_train$age, fill = salary_train$Salary)) +
geom_density(alpha = 0.9, color = 'Violet')
ggtitle("Age - Density Plot") #  graph Heading
ggplot(data=salary_train,aes(x = salary_train$age, fill = salary_train$Salary)) +
geom_density(alpha = 0.9, color = 'Violet')+ ggtitle("Age - Density Plot") #  graph Heading
ggplot(data=salary_train,aes(x = salary_train$workclass, fill = salary_train$Salary)) +
geom_density(alpha = 0.9, color = 'Violet')+ggtitle("Age - Density Plot") #  graph Heading
# Get into factor form to TRAIN model performance
con.names = salary_train %>% select_if(is.numeric) %>% colnames()
con.names
con.names =columns(salary_train)
con.names =colnames(salary_train, do.NULL = TRUE, prefix = "col")
# Get into factor form to TRAIN model performance
col.names =colnames(salary_train, do.NULL = TRUE, prefix = "col")
col.names
#####Support Vector Machines -------------------
library(readr)
library(dplyr)
library(kernlab)
library(caret)
library(ggplot2)
salary_train= read.csv("D:/Data_science/Assignments/Assignment_SVM/SalaryData_Train.csv")
salary_test= read.csv("D:/Data_science/Assignments/Assignment_SVM/SalaryData_Test.csv")
str(salary_train)
# Get into factor form to TRAIN model performance
col.names =colnames(salary_train, do.NULL = TRUE, prefix = "col")
salary_train$educationno <- as.factor(salary_train$educationno)
salary_test$educationno <- as.factor(salary_test$educationno)
str(salary_train)
str(salary_test)
#Visualization OR EDA
# Plot and ggplot
ggplot(data=salary_train,aes(x=salary_train$Salary, y = salary_train$age, fill = salary_train$Salary)) +
geom_boxplot() +
ggtitle("Box Plot")
plot(salary_train$workclass,salary_train$Salary)
plot(salary_train$maritalstatus,salary_train$Salary)
ggplot(data=salary_train,aes(x = salary_train$age, fill = salary_train$Salary)) +
geom_density(alpha = 0.9, color = 'Violet')+ ggtitle("Age - Density Plot") #  graph Heading
ggplot(data=salary_train,aes(x = salary_train$workclass, fill = salary_train$Salary)) +
geom_density(alpha = 0.9, color = 'Violet')+ggtitle("Age - Density Plot") #  graph Heading
ggplot(data=salary_train,aes(x = salary_train$workclass, fill = salary_train$Salary)) +
geom_density(alpha = 0.9, color = 'Violet')+ggtitle("workclass - Density Plot") #  graph Heading
salary_classifier <- ksvm(salary_train$Salary ~ ., data = salary_train,
kernel = "vanilladot")
salary_classifier
## Evaluating model performance ----
# predictions on testing dataset
salary_predictions <- predict(salary_classifier, salary_test)
head(salary_predictions)
table(salary_predictions, salary_test$Salary)
agreement <- salary_predictions == salary_test$Salary
table(agreement)
prop.table(table(agreement))
## Improving model performance ----rbfdot
salary_classifier_rbf <- ksvm(Salary ~ ., data = salary_train, kernel = "rbfdot")
salary_predictions_rbf <- predict(salary_classifier_rbf, salary_test)
agreement_rbf <- salary_predictions_rbf == salary_test$Salary
table(agreement_rbf)
prop.table(table(agreement_rbf))
## Improving model performance ----polydot
salary_classifier_polydot <- ksvm(Salary ~ ., data = salary_train, kernel = "polydot")
salary_predictions_polydot <- predict(salary_classifier_polydot, salary_test)
agreement_polydot <- salary_predictions_polydot == salary_test$Salary
table(agreement_polydot)
prop.table(table(agreement_polydot))
ForestFire= read.csv("D:/Data_science/Assignments/Assignment_SVM/forestfires.csv")
str(ForestFire)
class(ForestFire)
summary(ForestFire) # Confirms on the different scale and demands normalizing the data.
normalize<-function(x){
return ( (x-min(x))/(max(x)-min(x)))
}
ForestFire$temp = normalize(ForestFire$temp)
ForestFire$RH   = normalize(ForestFire$RH)
ForestFire$wind = normalize(ForestFire$wind)
ForestFire$rain = normalize(ForestFire$rain)
# Data Partition
set.seed(123)
ind <- sample(2, nrow(FF), replace = TRUE, prob = c(0.7,0.3))
ind <- sample(2, nrow(ForestFire), replace = TRUE, prob = c(0.7,0.3))
FF_train <- ForestFire[ind==1,]
FF_test  <- ForestFire[ind==2,]
library(e1071)
model1<-ksvm(size_category~temp+rain+wind+RH,
data= FF_train,kernel = "vanilladot")
model1
Area_pred <- predict(model1, FF_test)
table(Area_pred,FF_test$size_category)
agreement <- Area_pred == FF_test$size_category
table(agreement)
prop.table(table(agreement))
# kernel = rfdot
model_rfdot<-ksvm(size_category~temp+rain+wind+RH,
data= FF_train,kernel = "rbfdot")
pred_rfdot<-predict(model_rfdot,newdata=FF_test)
mean(pred_rfdot==FF_test$size_category) # 68.41
mean(Area_pred==FF_test$size_category)
model_poly<-ksvm(size_category~temp+rain+wind+RH,
data= FF_train,kernel = "polydot")
pred_poly<-predict(model_poly,newdata = FF_test)
mean(pred_poly==FF_test$size_category) # 67.80
library(recommenderlab)
library(dplyr)
library(caTools)
library(reshape2)
library(Matrix)
library(data.table)
library(ggplot2)
setwd("D:/Data_science/Assignments/Assignment_Recommandataion")
#book rating data
book_rate_data <- read.csv("D:/Data_science/Assignments/Assignment_Recommandataion/books.csv", header=TRUE)
head(book_rate_data)
book_rate_data <- book_rate_data[,-c(1)]
names(book_rate_data)[1]<-"users" #.....[1]--column number, "retings"----name to change for R
names(book_rate_data)[5]<-"ratings" #.....[1]--column number, "retings"----name to change for R
names(book_rate_data)[2]<-"bookname" #.....[1]--column number, "retings"----name to change for R
names(book_rate_data)[3]<-"author" #.....[1]--column number, "retings"----name to change for R
book_rate_data_g<-acast(book_rate_data, bookname ~ ratings)
class(book_rate_data_g)
book_rate_dataM<-as.matrix(book_rate_data_g)
#rating distribution
hist(book_rate_data$ratings)
## covert to matrix format
#book_rate_data_matrix <- as.matrix(acast(book_rate_data, bookname~author, fun.aggregate = mean, value.var = "ratings"))
dim(book_rate_dataM)
book_rate_data_matrix <- as(book_rate_dataM, 'realRatingMatrix')
book_rate_data_matrix
as(book_rate_data_matrix, "list")
book_recomm_model1 <- Recommender(book_rate_data_matrix[1:nrows(book_rate_data_matrix)], method="POPULAR")
book_recomm_model1 <- Recommender(book_rate_data_matrix, method="POPULAR")
book_recomm_model2 = Recommender(book_rate_data_matrix, method="UBCF", param=list(normalize = "Z-score", method="cosine", nn=5, minRating=1)) ## User-based collaborative filtering
book_recomm_model2 = Recommender(book_rate_data_matrix, method="UBCF", param=list(normalize = "Z-score", method="cosine", nn=5)) ## User-based collaborative filtering
book_recomm_model3 = Recommender(book_rate_data_matrix, method="IBCF", param=list(normalize = "Z-score", method="jaccard", nn=5)) ## Item-based collaborative filtering
book_recomm_model3 = Recommender(book_rate_data_matrix, method="IBCF", param=list(normalize = "Z-score", method="jaccard", nn=5)) ## Item-based collaborative filtering
book_recomm_model2 = Recommender(book_rate_data_matrix, method="UBCF", param=list(normalize = "Z-score", method="cosine")) ## User-based collaborative filtering
book_recomm_model3 = Recommender(book_rate_data_matrix, method="IBCF", param=list(normalize = "Z-score", method="jaccard")) ## Item-based collaborative filtering
#Predictions for two users
recommended_items1 <- predict(book_recomm_model1, book_rate_data_matrix, n=5, type="ratings")
R1<-as(recommended_items1, "list")
head(summry(R1))
head(summary(R1))
head(R1)
tail(R1)
library(recommenderlab)
library(dplyr)
library(caTools)
library(reshape2)
library(Matrix)
library(data.table)
library(ggplot2)
setwd("D:/Data_science/Assignments/Assignment_Recommandataion")
#book rating data
#book rating data
book_rate_data <- read.csv("D:/Data_science/Assignments/Assignment_Recommandataion/books.csv", header=TRUE)
head(book_rate_data)
book_rate_data <- book_rate_data[,-c(1)]
names(book_rate_data)[1]<-"users" #.....[1]--column number, "retings"----name to change for R
names(book_rate_data)[5]<-"ratings" #.....[1]--column number, "retings"----name to change for R
names(book_rate_data)[2]<-"bookname" #.....[1]--column number, "retings"----name to change for R
names(book_rate_data)[3]<-"author" #.....[1]--column number, "retings"----name to change for R
### Ordering tha data according to ratings
book_rate_data <- book_rate_data[order( book_rate_data[,5] ),]
### use only users with more than 0 ratings
book_rate_data <- filter(book_rate_data, book_rate_data$ratings >= 1)
book_rate_data_g<-acast(book_rate_data, bookname ~ ratings)
class(book_rate_data_g)
book_rate_dataM<-as.matrix(book_rate_data_g)
#rating distribution
hist(book_rate_data$ratings)
## covert to matrix format
#book_rate_data_matrix <- as.matrix(acast(book_rate_data, bookname~author, fun.aggregate = mean, value.var = "ratings"))
dim(book_rate_dataM)
book_rate_data_matrix <- as(book_rate_dataM, 'realRatingMatrix')
book_rate_data_matrix
as(book_rate_data_matrix, "list")
book_recomm_model1 <- Recommender(book_rate_data_matrix, method="POPULAR")
book_recomm_model2 = Recommender(book_rate_data_matrix, method="UBCF", param=list(normalize = "Z-score", method="cosine")) ## User-based collaborative filtering
book_recomm_model3 = Recommender(book_rate_data_matrix, method="IBCF", param=list(normalize = "Z-score", method="jaccard")) ## Item-based collaborative filtering
#Predictions for two users
recommended_items1 <- predict(book_recomm_model1, book_rate_data_matrix, n=5, type="ratings")
R1<-as(recommended_items1, "list")
head(R1)
tail(R1)
#Predictions for two users
recommended_items1 <- predict(book_recomm_model1, book_rate_data_matrix, n=5)
R1<-as(recommended_items1, "list")
head(R1)
tail(R1)
#Predictions for two users
recommended_items2 <- predict(book_recomm_model2, book_rate_data_matrix, n=5)
R2<-as(recommended_items2, "list")
head(R2)
tail(R2)
#Predictions for two users
recommended_items3 <- predict(book_recomm_model3, book_rate_data_matrix, n=5)
R3<-as(recommended_items3, "list")
head(R3)
tail(R3)
library(recommenderlab)
library(dplyr)
library(caTools)
library(reshape2)
library(Matrix)
library(data.table)
library(ggplot2)
setwd("D:/Data_science/Assignments/Assignment_Recommandataion")
#book rating data
book_rate_data <- read.csv("D:/Data_science/Assignments/Assignment_Recommandataion/books.csv", header=TRUE)
book_rate_data <- book_rate_data[,-c(1)]
names(book_rate_data)[1]<-"users" #.....[1]--column number, "retings"----name to change for R
names(book_rate_data)[5]<-"ratings" #.....[1]--column number, "retings"----name to change for R
names(book_rate_data)[2]<-"bookname" #.....[1]--column number, "retings"----name to change for R
names(book_rate_data)[3]<-"author" #.....[1]--column number, "retings"----name to change for R
head(book_rate_data)
### Removing Duplicated Entries
book_rate_data<- book_rate_data[!duplicated(book_rate_data$bookname), ]
### Ordering tha data according to ratings
book_rate_data <- book_rate_data[order( book_rate_data[,5] ),]
### use only users with more than 0 ratings
book_rate_data <- filter(book_rate_data, book_rate_data$ratings >= 1)
#rating distribution
hist(book_rate_data$ratings)
## covert to matrix format
book_rate_data_g<-acast(book_rate_data, bookname ~ ratings)
class(book_rate_data_g)
book_rate_dataM<-as.matrix(book_rate_data_g)
dim(book_rate_dataM)
#the datatype should be realRatingMatrix inorder to build recommendation of books
book_rate_data_matrix <- as(book_rate_dataM, 'realRatingMatrix')
#View in other possible ways
book_rate_data_matrix
as(book_rate_data_matrix, "list")
#Popularity based
book_recomm_model1 <- Recommender(book_rate_data_matrix, method="POPULAR")
book_recomm_model2 = Recommender(book_rate_data_matrix, method="UBCF") ## User-based collaborative filtering
book_recomm_model3 = Recommender(book_rate_data_matrix, method="IBCF")
#Predictions for two users
recommended_items1 <- predict(book_recomm_model1, book_rate_data_matrix, n=5)
R1<-as(recommended_items1, "list")
head(R1)
tail(R1)
#Predictions for two users
recommended_items2 <- predict(book_recomm_model2, book_rate_data_matrix, n=5)
R2<-as(recommended_items2, "list")
head(R2)
tail(R2)
#Predictions for two users
recommended_items3 <- predict(book_recomm_model3, book_rate_data_matrix, n=5)
R3<-as(recommended_items3, "list")
head(R3)
tail(R3)
install.packages("C50",repos = "http://cran.us.r-project.org")
install.packages("tree",repos = "http://cran.us.r-project.org")
install.packages("caret",repos = "http://cran.us.r-project.org")
install.packages("gmodels",repos = "http://cran.us.r-project.org")
install.packages("party",repos = "http://cran.us.r-project.org")
install.packages("gmodels")
install.packages("party")
install.packages("knitr")
install.packages("png")
library(party)
library(caret)
library(C50)
library(tree)
library(gmodels)
library(knitr)
library(png)
library(party)
FraudCheck <- read.csv(file.choose())
setwd(D:\Data_science\Assignments\Assignment_Decision_tree)
setwd("D:\Data_science\Assignments\Assignment_Decision_tree\")
FraudCheck <- read.csv(file.choose())
# Splitting data into training and testing.
# splitting the data based on Sales
hist(FraudCheck$Taxable.Income)
setwd("D:\Data_science\Assignments\Assignment_Decision_tree")
setwd("D:/Data_science/Assignments/Assignment_Decision_tree")
# Splitting data into training and testing.
# splitting the data based on Sales
hist(FraudCheck$Taxable.Income)
View(FraudCheck)
Risky_Good = ifelse(FraudCheck$Taxable.Income<= 30000, "Risky", "Good")
FC = data.frame(FraudCheck,Risky_Good)
FC_train <- FC[1:300,]
# View(CD_train)
FC_test <- FC[301:600,]
png(file = "decision_tree.png")
opall_tree = ctree(Risky_Good ~ Undergrad + Marital.Status + City.Population +
Work.Experience + Urban, data = FC)
summary(opall_tree)
plot(opall_tree)
plot(opall_tree)
png(file = "decision_tree.png")
op_tree = ctree(Risky_Good ~ Undergrad + Marital.Status + City.Population +
Work.Experience + Urban, data = FC_train)
summary(op_tree)
plot(op_tree)
pred_tree <- as.data.frame(predict(op_tree,newdata=FC_test))
pred_tree["final"] <- NULL
pred_test_df <- predict(op_tree,newdata=FC_test)
mean(pred_test_df==FC_test$Risky_Good) # Accuracy = 82 %
CrossTable(FC_test$Risky_Good,pred_test_df)
confusionMatrix(FC_test$Risky_Good,pred_test_df)
head(FraudCheck)
colnames(x, do.NULL = TRUE, prefix = "col")
colnames(FraudCheck, do.NULL = TRUE, prefix = "col")
colnames(FraudCheck) <- value
library(party)
library(caret)
library(C50)
library(tree)
library(gmodels)
library(knitr)
library(png)
setwd("D:/Data_science/Assignments/Assignment_Decision_tree")
CompanyData <- read.csv(file.choose())
setwd("D:/Data_science/Assignments/Assignment_Decision_tree")
CompanyData <- read.csv(file.choose())
head(FraudCheck)
head(CompanyData)
colnames(CompanyData, do.NULL = TRUE, prefix = "col")
hist(CompanyData$Sales)
hist(CompanyData$Sales)
hist(CompanyData$Sales)
hist(CompanyData$Sales)
library(party)
library(caret)
library(C50)
library(tree)
library(gmodels)
library(knitr)
library(png)
setwd("D:/Data_science/Assignments/Assignment_Decision_tree")
CompanyData <- read.csv(file.choose())
head(CompanyData)
colnames(CompanyData, do.NULL = TRUE, prefix = "col")
hist(CompanyData$Sales)
High = ifelse(CompanyData$Sales<10, "No", "Yes")
CD = data.frame(CompanyData, High)
# Splitting data into training and testing.
# splitting the data based on Sales
CD_train <- CD[1:200,]
# View(CD_train)
CD_test <- CD[201:400,]
#Using Party Function
op_tree = ctree(High ~ CompPrice + Income + Advertising + Population + Price + ShelveLoc
+ Age + Education + Urban + US, data = CD_train)
summary(op_tree)
window()
windows()
plot(op_tree)
# On looking into the Above tree, i see that if the Location of the Shelv is good,
# then there is a probability of 60% chance that the customer will buy.
# With ShelveLoc having a Bad or Medium and Price <= 87, the probability of High sales
# could be 60%.
# If ShelveLoc is Bad or Medium, With Price >= 87 and Advertising less then <= 7 then there
# is a zero percent chance of high sales.
# If ShelveLoc is Bad or Medium, With Price >= 87 and Advertising less then > 7 then there
# is a 20 % percent chance of high sales.
pred_tree <- as.data.frame(predict(op_tree,newdata=CD_test))
pred_tree["final"] <- NULL
pred_test_df <- predict(op_tree,newdata=CD_test)
mean(pred_test_df==CD$High) # Accuracy = 68.75%
CrossTable(CD_test$High,pred_test_df)
confusionMatrix(CD_test$High,pred_test_df)
##### Using tree function
cd_tree_org <- tree(High~.-Sales,data=CD)
summary(cd_tree_org)
plot(cd_tree_org)
text(cd_tree_org,pretty = 0)
##### Using tree function
cd_tree <- tree(High~.-Sales,data=CD_train)
summary(cd_tree)
plot(cd_tree)
text(cd_tree,pretty = 0)
# Predicting the test data using the model
pred_tree <- as.data.frame(predict(cd_tree,newdata=CD_test))
pred_tree["final"] <- NULL
pred_test_df <- predict(cd_tree,newdata=CD_test)
pred_tree$final <- colnames(pred_test_df)[apply(pred_test_df,1,which.max)]
pred_tree$final <- as.factor(pred_tree$final)
summary(pred_tree$final)
#performance of the model
summary(CD_test$High)
mean(pred_tree$final==CD$High) # Accuracy = 77.25
CrossTable(CD_test$High,pred_tree$final)
confusionMatrix(CD_test$High,pred_tree$final)
library(party)
library(caret)
library(C50)
library(tree)
library(gmodels)
library(knitr)
library(png)
data("iris")
View(iris)
irisct <- ctree(Species ~ .,data = iris)
plot(irisct)
table(predict(irisct), iris$Species)
pred_tree <- as.data.frame(predict(iris_tree,iris))
pred_tree <- as.data.frame(predict(irisct,iris))
pred_tree["final"] <- NULL
for (i in 1:nrow(pred_tree)){
pred_tree[i,"final"] <- ifelse(pred_tree[i,"setosa"]>0.5,"setosa",ifelse(pred_tree[i,"versicolor"]>0.5,"versicolor","virginica"))
}
##### Using D.Tree #####
library(tree)
iris_tree <- tree(Species~.,data=iris)
plot(iris_tree)
text(iris_tree)
pred_tree <- as.data.frame(predict(iris_tree,iris))
pred_tree["final"] <- NULL
for (i in 1:nrow(pred_tree)){
pred_tree[i,"final"] <- ifelse(pred_tree[i,"setosa"]>0.5,"setosa",ifelse(pred_tree[i,"versicolor"]>0.5,"versicolor","virginica"))
}
library(gmodels)
CrossTable(iris$Species,pred_tree$final)
mean(pred_tree$final==iris$Species) # Accuracy = 0.9733
install.packages("tree")
install.packages("tree")
install.packages("tree")
install.packages("caret")
install.packages("gmodels")
install.packages("party")
library(party)
library(caret)
library(tree)
library(gmodels)
install.packages("tree")
install.packages("caret")
install.packages("gmodels")
install.packages("party")
install.packages("gmodels")
install.packages("party")
data("iris")
View(iris)
irisct <- ctree(Species ~ .,data = iris)
irisct
# Inspect the ctree model
windows()
plot(irisct)
table(predict(irisct), iris$Species)
View(iris)
irisct <- ctree(Species ~ Sepal.Length,data = iris)
irisct
# Inspect the ctree model
windows()
plot(irisct)
data("iris")
#next, rename columns to represent the correct flower attribute
iris<-rename(iris, c("X1"="sepal.length", "X2"="sepal.width",
+ "X3"="petal.length", "X4"="petal.width", "X5"="class"))
View(iris)
head(CompanyData)
head(iris)
#next, rename columns to represent the correct flower attribute
iris<-rename(iris, c("X1"="Sepal.Length", "X2"="Sepal.Width",
+ "X3"="Petal.Length", "X4"="Petal.Width", "X5"="Species"))
#change iris class into a factor
iris$Species<-as.factor(iris$Species)
#overall descriptives of the dataset
summary(iris)
tree1<-ctree(Species~Sepal.Length, data=iris) #set the model for the tree, predicting class by sepal length , data set being used is iris
plot(tree1) #view the decision tree
table(predict(irisct), iris$Species)
table(predict(tree1), iris$Species)
#Tree2==(Sepal.Width)
tree2<-ctree(Species~Sepal.Width, data=iris) #set the model for the tree, predicting class by sepal length , data set being used is iris
windows()
plot(tree2) #view the decision tree
table(predict(tree2), iris$Species)
#Tree3==(Petal.Length)
tree3<-ctree(Species~Petal.Length, data=iris) #set the model for the tree, predicting class by sepal length , data set being used is iris
windows()
plot(tree3) #view the decision tree
table(predict(tree3), iris$Species)
#Tree4==(Petal.Width)
tree4<-ctree(Species~Petal.Width, data=iris) #set the model for the tree, predicting class by sepal length , data set being used is iris
windows()
plot(tree4) #view the decision tree
table(predict(tree4), iris$Species)
#With Sepal Length and Sepal Width
tree5<-ctree(Species~Sepal.Length+Sepal.Width, data=iris)
windows()
plot(tree5)#view the decision tree
#With Sepal Length and Sepal Width
tree5<-ctree(Species~Sepal.Length+Sepal.Width, data=iris)
windows()
plot(tree5)#view the decision tree
table(predict(tree5), iris$Species)
#With Petal Length and petal Width
tree6<-ctree(Species~Petal.Length+Petal.Width, data=iris)
windows()
plot(tree6)#view the decision tree
table(predict(tree6), iris$Species)
tree7<-ctree(Species~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width, data=iris)
windows()
plot(tree7)#view the decision tree
table(predict(tree7), iris$Species)
library(plyr)
library(readr)
