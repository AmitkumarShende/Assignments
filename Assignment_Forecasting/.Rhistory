agreement <- salary_predictions == salary_test$Salary
table(agreement)
prop.table(table(agreement))
## Improving model performance ----rbfdot
salary_classifier_rbf <- ksvm(Salary ~ ., data = salary_train, kernel = "rbfdot")
salary_predictions_rbf <- predict(salary_classifier_rbf, salary_test)
agreement_rbf <- salary_predictions_rbf == salary_test$Salary
table(agreement_rbf)
prop.table(table(agreement_rbf))
## Improving model performance ----polydot
salary_classifier_polydot <- ksvm(Salary ~ ., data = salary_train, kernel = "polydot")
salary_predictions_polydot <- predict(salary_classifier_polydot, salary_test)
agreement_polydot <- salary_predictions_polydot == salary_test$Salary
table(agreement_polydot)
prop.table(table(agreement_polydot))
ForestFire= read.csv("D:/Data_science/Assignments/Assignment_SVM/forestfires.csv")
str(ForestFire)
class(ForestFire)
summary(ForestFire) # Confirms on the different scale and demands normalizing the data.
normalize<-function(x){
return ( (x-min(x))/(max(x)-min(x)))
}
ForestFire$temp = normalize(ForestFire$temp)
ForestFire$RH   = normalize(ForestFire$RH)
ForestFire$wind = normalize(ForestFire$wind)
ForestFire$rain = normalize(ForestFire$rain)
# Data Partition
set.seed(123)
ind <- sample(2, nrow(FF), replace = TRUE, prob = c(0.7,0.3))
ind <- sample(2, nrow(ForestFire), replace = TRUE, prob = c(0.7,0.3))
FF_train <- ForestFire[ind==1,]
FF_test  <- ForestFire[ind==2,]
library(e1071)
model1<-ksvm(size_category~temp+rain+wind+RH,
data= FF_train,kernel = "vanilladot")
model1
Area_pred <- predict(model1, FF_test)
table(Area_pred,FF_test$size_category)
agreement <- Area_pred == FF_test$size_category
table(agreement)
prop.table(table(agreement))
# kernel = rfdot
model_rfdot<-ksvm(size_category~temp+rain+wind+RH,
data= FF_train,kernel = "rbfdot")
pred_rfdot<-predict(model_rfdot,newdata=FF_test)
mean(pred_rfdot==FF_test$size_category) # 68.41
mean(Area_pred==FF_test$size_category)
model_poly<-ksvm(size_category~temp+rain+wind+RH,
data= FF_train,kernel = "polydot")
pred_poly<-predict(model_poly,newdata = FF_test)
mean(pred_poly==FF_test$size_category) # 67.80
install.packages("xlsx")
PMPG <- read.csv("D:/Data_science/Assignments/Cars.csv.csv")
PMPG <- read.csv("D:/Data_science/Assignments/Cars.csv")
View(PMPG)
P(MPG>38)
View(PMPG)
pnorm(MPG>38)
pnorm(PMPG$MPG>38)
library(dplyr)
library(psych)
mpg38=pnorm(PMPG$MPG > 38)
mpg38
mean(PMPG$MPG)
sd(PMPG$MPG)
median(PMPG$MPG)
P<-[PMPG$MPG > 38]
P<-[PMPG$MPG >= 38]
P1<- (PMPG$MPG >= 38)
P1
P1<- (PMPG$MPG > 38)
P1
mpg38=pnorm(P1,P1mean,P1sd)
P1mean<-mean(PMPG$MPG)
P1sd<-sd(PMPG$MPG)
median(PMPG$MPG)
P1<- (PMPG$MPG > 38)
P1
mpg38=pnorm(P1,P1mean,P1sd)
mpg38
P1median<-median(PMPG$MPG)
View(PMPG)
summary(PMPG)
library(ggplot2)
hist(PMPG$MPG,
main = "Histogram of MPG",
xlab = "MPG")
qqnorm(PMPG$MPG)
qqnorm(PMPG$MPG), qqline(PMPG$MPG)
qqnorm(PMPG$MPG); qqline(PMPG$MPG)
PMPG <- read.csv("D:/Data_science/Assignments/wc-at.csv")
View(PMPG)
qqnorm(PMPG$Waist); qqline(PMPG$Waist)
qqnorm(PMPG$AT); qqline(PMPG$AT)
p <- pt((260-270)/(90/sqrt(18)), 18)
pt(tscore,df)
?pt
mpg38=pnorm(P1,P1mean,P1sd)
P1<- PMPG$MPG > 38
P1
pnorm(PMPG$MPG > 38)
pnorm(PMPG$MPG)
pnorm(P1)
pnorm(P1)
PMPG <- read.csv("D:/Data_science/Assignments/Cars.csv")
pnorm(P1)
pnorm(PMPG$MPG > 38)
P1<- (PMPG$MPG > 38)
P1
mpg38=pnorm(P1,P1mean,P1sd)
mpg38
pnorm(PMPG$MPG > 38)
library(prob)
install.packages("prob")
library(prob)
Prob(MPG>38)
Prob(PMPG$MPGMPG>38)
mpg=PMPG$MPG
Prob(mpg>38)
Prob(MPG, mpg>38)
probspace(MPG)
View(PMPG)
probspace(PMPG$MPG)
Prob(PMPG$MPG, x<38)
P1=probspace(PMPG$MPG)
probg38=Prob(P1, x<38)
prob_Lessthan_40=Prob(P1, x<40)
prob_greaterthan_38=Prob(P1, x>38)
prob_20<MPG<40=Prob(P1, 20<x<50)
prob_MPG_GT_20_and_MPG_LT_50=Prob(P1, 20<x<50)
prob_MPG_GT_20_and_MPG_LT_50=Prob(P1, x>20 && x<50)
# Greater than==GT, LessThan==LT
prob_MPG_GT_38=Prob(P1, x>38)
prob_MPG_GT_20_and_MPG_LT_50=Prob(P1, x>20 && x<50)
prob_MPG_GT_20_LT_50=Prob(P1, x>20 && x<50)
mean=mean("PMPG$MPG")
mean=mean(PMPG$MPG)
sigma=sd(PMPG$MPG)
prob_MPG_GT_38 = 1-pnorm(38,mean,sigma)
prob_MPG_GT_38
prob_MPG_LT_40 = pnorm(40,mean,sigma)
prob_MPG_GT_20_LT_50= pnorm(50,mean,sigma)-pnorm(20,mean,sigma)
PMPG <- read.csv("D:/Data_science/Assignments/Cars.csv")
library(dplyr)
library(psych)
library(modeest)
library(XML)
library(prob)
mean=mean(PMPG$MPG) # calculation of mean
sigma=sd(PMPG$MPG)  # calculation of standard deviation #
sigma=sd(PMPG$MPG)  # calculation of standard deviation #9.13
prob_MPG_GT_38 = 1-pnorm(38,mean,sigma) #
prob_MPG_GT_38 = 1-pnorm(38,mean,sigma) #0.34
prob_MPG_LT_40 = pnorm(40,mean,sigma)
prob_MPG_LT_40 = pnorm(40,mean,sigma)#0.73
prob_MPG_GT_20_LT_50= pnorm(50,mean,sigma)-pnorm(20,mean,sigma)
library(readr)
setwd("D:/Data_science/Assignments/Assignment_Forecasting")
Airline<-read.xlsx(file.choose()) # read the Airlines+Data
library(caret)
library(dplyr)
Airline<-read.xlsx(file.choose()) # read the Airlines+Data
library(readxl)
Airline<-read.xlsx(file.choose()) # read the Airlines+Data
Airline<-read_xlsx(file.choose()) # read the Airlines+Data
View(Airline) # Seasonality 12 months
windows()
library(readxl)
plot(Airline$Ridership...000.,type="o")
View(Airline)
plot(Airline$Passenger...000.,type="o")
plot(Airline$Passenger,type="o")
plot(Airline$Month,type="o")
X<- data.frame(outer(rep(month.abb,length = 159), month.abb,"==") + 0 )# Creating dummies for 12 months
View(X)
colnames(X)<-month.abb # Assigning month names
View(X)
Airlinedata<-cbind(Airline,X)
Airlinedata<-cbind(Airline,X)
View(X)
Airlinedata<-cbind(Airline,X)
X<- data.frame(outer(rep(month.abb,length = 96), month.abb,"==") + 0 )# Creating dummies for 12 months
View(X)
colnames(X)<-month.abb # Assigning month names
View(X)
Airlinedata<-cbind(Airline,X)
View(Airlinedata)
colnames(Airlinedata)[2]<-"Passenger"
colnames(Airlinedata)
Airlinedata["t"]<- 1:159
Airlinedata["t"]<- 1:96
View(Airlinedata)
Airlinedata["log_passenger"]<-log(Airlinedata["Passenger"])
Airlinedata["t_square"]<-Airlinedata["t"]*Airlinedata["t"]
attach(Airlinedata)
train<-Airlinedata[1:84,]
test<-Airlinedata[85:96,]
linear_model<-lm(Airline~t,data=train)
linear_model<-lm(Passenger~t,data=train)
summary(linear_model)
linear_pred<-data.frame(predict(linear_model,interval='predict',newdata =test))
View(linear_pred)
rmse_linear<-sqrt(mean((test$Passenger-linear_pred$fit)^2,na.rm = T))
rmse_linear # 209.9256
expo_model<-lm(log_rider~t,data=train)
expo_model<-lm(log_passenger~t,data=train)
summary(expo_model)
expo_pred<-data.frame(predict(expo_model,interval='predict',newdata=test))
rmse_expo<-sqrt(mean((test$Passenger-exp(expo_pred$fit))^2,na.rm = T))
rmse_expo # 217.0526
plot(Airline$Passengers,type="o")
Quad_model<-lm(Passenger~t+t_square,data=train)
Quad_pred<-data.frame(predict(Quad_model,interval='predict',newdata=test))
rmse_Quad<-sqrt(mean((test$Passenger-Quad_pred$fit)^2,na.rm=T))
rmse_Quad # 137.15
sea_add_model<-lm(Passenger~Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov,data=train)
summary(sea_add_model)
sea_add_pred<-data.frame(predict(sea_add_model,newdata=test,interval='predict'))
rmse_sea_add<-sqrt(mean((test$Passenger-sea_add_pred$fit)^2,na.rm = T))
rmse_sea_add # 264.66
Add_sea_Linear_model<-lm(Passenger~t+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov,data=train)
Add_sea_Linear_model<-lm(Passenger~t+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov,data=train)
Add_sea_Linear_model<-lm(Passenger~t+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov,data=train)
Add_sea_Linear_pred<-data.frame(predict(Add_sea_Linear_model,interval='predict',newdata=test))
rmse_Add_sea_Linear<-sqrt(mean((test$Passenger-Add_sea_Linear_pred$fit)^2,na.rm=T))
rmse_Add_sea_Linear # 168.6316
Add_sea_Quad_model<-lm(Passenger~t+t_square+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov,data=train)
summary(Add_sea_Quad_model)
Add_sea_Quad_model<-lm(Passenger~t+t_square+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov,data=train)
summary(Add_sea_Quad_model)
Add_sea_Quad_pred<-data.frame(predict(Add_sea_Quad_model,interval='predict',newdata=test))
rmse_Add_sea_Quad<-sqrt(mean((test$Passenger-Add_sea_Quad_pred$fit)^2,na.rm=T))
rmse_Add_sea_Quad # 50.60725
multi_sea_model<-lm(log_passenger~Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov,data = train)
multi_sea_model<-lm(log_passenger~Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov,data = train)
summary(multi_sea_model)
multi_sea_pred<-data.frame(predict(multi_sea_model,newdata=test,interval='predict'))
rmse_multi_sea<-sqrt(mean((test$Passenger-exp(multi_sea_pred$fit))^2,na.rm = T))
rmse_multi_sea # 268.197
multi_add_sea_model<-lm(log_passenger~t+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov,data = train)
summary(multi_add_sea_model)
multi_add_sea_pred<-data.frame(predict(multi_add_sea_model,newdata=test,interval='predict'))
rmse_multi_add_sea<-sqrt(mean((test$Passenger-exp(multi_add_sea_pred$fit))^2,na.rm = T))
rmse_multi_add_sea # 172.76
table_rmse<-data.frame(c("rmse_linear","rmse_expo","rmse_Quad","rmse_sea_add","rmse_Add_sea_Quad","rmse_multi_sea","rmse_multi_add_sea"),c(rmse_linear,rmse_expo,rmse_Quad,rmse_sea_add,rmse_Add_sea_Quad,rmse_multi_sea,rmse_multi_add_sea))
View(table_rmse)
colnames(table_rmse)<-c("model","RMSE")
View(table_rmse)
new_model <- lm(Passenger~t+t_square+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov,data=Airlinedata)
resid <- residuals(new_model)
resid[1:10]
new_model <- lm(log_passenger~t+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov,data=Airlinedata)
resid <- residuals(new_model)
resid[1:10]
windows()
acf(resid,lag.max = 10)
k <- arima(resid, order=c(1,0,0))
str(k)
View(data.frame(res=resid,newresid=k$residuals))
windows()
acf(k$residuals,lag.max = 15)
pred_res<- predict(arima(k$residuals,order=c(1,0,0)),n.ahead = 12)
str(pred_res)
pred_res$pred
acf(k$residuals)
write.csv(Airlinedata,file="Airlinedata.csv",col.names = F,row.names = F)
# Using Arima Model -
Cocacola<-read_excel(file.choose()) # read the Cocacola data
# Using Arima Model -
Cocacola<-read_excel(file.choose()) # read the Cocacola data
Cocacola <- Cocacola$Sales
Cocacola <- as.ts(Cocacola)
View(Cocacola)
class(Cocacola)
Cocacola1 <- ts(Cocacola,start=c(1986,1),end=c(1995,6),frequency=4)
start(Cocacola1)
end(Cocacola1)
class(Cocacola1)
sum(is.na(Cocacola1))
summary(Cocacola1)
View(Cocacola1)
# decomdata<- decompose(Cocacola1, "additive")
decomdata<- decompose(Cocacola1, "multiplicative")
plot(decomdata)
plot(Cocacola1)
plot(Cocacola)
plot(decomdata$seasonal)
plot(decomdata$trend)
plot(decomdata$random)
plot(Cocacola)
# using decompose() function to know trend sesonality, roandomness of the datave")
decomdata<- decompose(Cocacola1, "multiplicative")
plot(decomdata)
abline(reg=lm(Cocacola1~time(Cocacola1)))
# EDA on the Original Data
plot(Cocacola1)
abline(reg=lm(Cocacola1~time(Cocacola1)))
cycle(Cocacola1)
# Boxplot by Cycle
boxplot(Cocacola1~cycle(Cocacola1,xlab = "Date", ylab = "Passenger Number(100's)",
main = "Monthly Boxplot of passengers from 1995 to 2002"))
# Use Auto Arima for the Best Model
Newmodel <- auto.arima(Cocacola1)
library(readr)
library(caret)
library(dplyr)
library(readxl)
library(forecast)
library(FPP)
library(smooth)
library(tseries)
install.packages("smooth")
install.packages(FPP)
install.packages("fpp")
library(FPP)
library(fpp)
library(smooth)
library(tseries)
# Use Auto Arima for the Best Model
Newmodel <- auto.arima(Cocacola1)
Newmodel
auto.arima(Cocacola1, ic = "aic", trace = TRUE)
plot.ts(Newmodel$residuals)
acf(ts(Newmodel$residuals),main = 'ACF Residual')
pacf(ts(Newmodel$residuals),main = 'PACF Residual')
# Forecast for next 2 year
Pass_Forecast <- forecast(Newmodel,Level=c(95),h=10*12)
plot(Pass_Forecast)
Box.test(Newmodel$resid, lag = 5, type = "Ljung-Box")
Box.test(Newmodel$resid, lag = 15, type = "Ljung-Box")
Box.test(Newmodel$resid, lag = 10, type = "Ljung-Box")
library(readr)
library(caret)
library(dplyr)
library(readxl)
library(forecast)
library(fpp)
library(smooth)
library(tseries)
setwd("D:/Data_science/Assignments/Assignment_Forecasting")
# Using Arima Model -
Cocacola<-read_excel(file.choose()) # read the Cocacola data
Cocacola <- Cocacola$Sales
Cocacola <- as.ts(Cocacola)
View(Cocacola)
class(Cocacola)
Cocacola1 <- ts(Cocacola,start=c(1986,1),end=c(1995,6),frequency=4)
start(Cocacola1)
end(Cocacola1)
class(Cocacola1)
sum(is.na(Cocacola1))
summary(Cocacola1)
View(Cocacola1)
plot(Cocacola)
# using decompose() function to know trend sesonality, roandomness of the datave")
decomdata<- decompose(Cocacola1, "multiplicative")
plot(decomdata)
plot(decomdata$seasonal)
plot(decomdata$trend)
plot(decomdata$random)
# EDA on the Original Data
plot(Cocacola1)
abline(reg=lm(Cocacola1~time(Cocacola1)))
cycle(Cocacola1)
# Boxplot by Cycle
boxplot(Cocacola1~cycle(Cocacola1,xlab = "Date", ylab = "Passenger Number(100's)",
main = "Monthly Boxplot of passengers from 1995 to 2002"))
# Use Auto Arima for the Best Model
Newmodel <- auto.arima(Cocacola1)
Newmodel
auto.arima(Cocacola1, ic = "aic", trace = TRUE)
plot.ts(Newmodel$residuals)
acf(ts(Newmodel$residuals),main = 'ACF Residual')
pacf(ts(Newmodel$residuals),main = 'PACF Residual')
# Forecast for next 2 year
Pass_Forecast <- forecast(Newmodel,Level=c(95),h=10*12)
plot(Pass_Forecast)
Box.test(Newmodel$resid, lag = 5, type = "Ljung-Box")
Box.test(Newmodel$resid, lag = 15, type = "Ljung-Box")
Box.test(Newmodel$resid, lag = 10, type = "Ljung-Box")
# Using Arima Model -
Plastics<-read.csv(file.choose()) # read the Plastic  Data
library(readr)
library(caret)
library(dplyr)
library(readxl)
library(forecast)
library(fpp)
library(smooth)
library(tseries)
setwd("D:/Data_science/Assignments/Assignment_Forecasting")
# Using Arima Model -
Plastics<-read.csv(file.choose()) # read the Plastic  Data
View(Plastics)
View(Plastics) # Seasonality 12 months
windows()
plot(Plastics$Sales,type="o")
X<- data.frame(outer(rep(month.abb,length = 60), month.abb,"==") + 0 )# Creating dummies for 12 months
View(X)
colnames(X)<-month.abb # Assigning month names
View(X)
Plasticsdata<-cbind(Plastics,X)
View(Plastics)
colnames(Plastics)
Plasticsdata["t"]<- 1:60
View(Plasticsdata)
Plasticsdata["log_Sales"]<-log(Plasticsdata["Sales"])
Plasticsdata["t_square"]<-Plasticsdata["t"]*Plasticsdata["t"]
attach(Plasticsdata)
train<-Plasticsdata[1:48,]
test<-Plasticsdata[49:60,]
linear_model<-lm(Sales~t,data=train)
summary(linear_model)
linear_pred<-data.frame(predict(linear_model,interval='predict',newdata =test))
View(linear_pred)
rmse_linear<-sqrt(mean((test$Sales-linear_pred$fit)^2,na.rm = T))
rmse_linear # 260.9378 and Adjusted R2 Value = 31.50
expo_model<-lm(log_Sales~t,data=train)
summary(expo_model)
expo_pred<-data.frame(predict(expo_model,interval='predict',newdata=test))
rmse_expo<-sqrt(mean((test$Sales-exp(expo_pred$fit))^2,na.rm = T))
rmse_expo # 268.6938  and Adjusted R2 - 30.25 %
library(readr)
library(caret)
library(dplyr)
library(readxl)
library(forecast)
library(fpp)
library(smooth)
library(tseries)
setwd("D:/Data_science/Assignments/Assignment_Forecasting")
# Using Arima Model -
Plastics<-read.csv(file.choose()) # read the Plastic  Data
View(Plastics) # Seasonality 12 months
windows()
plot(Plastics$Sales,type="o")
X<- data.frame(outer(rep(month.abb,length = 60), month.abb,"==") + 0 )# Creating dummies for 12 months
View(X)
colnames(X)<-month.abb # Assigning month names
View(X)
Plasticsdata<-cbind(Plastics,X)
View(Plastics)
View(Plasticsdata)
colnames(Plasticsdata)
Plasticsdata["t"]<- 1:60
View(Plasticsdata)
View(Plasticsdata)
Plasticsdata["log_Sales"]<-log(Plasticsdata["Sales"])
Plasticsdata["t_square"]<-Plasticsdata["t"]*Plasticsdata["t"]
attach(Plasticsdata)
View(Plasticsdata)
train<-Plasticsdata[1:48,]
test<-Plasticsdata[49:60,]
linear_model<-lm(Sales~t,data=train)
summary(linear_model)
linear_pred<-data.frame(predict(linear_model,interval='predict',newdata =test))
View(linear_pred)
rmse_linear<-sqrt(mean((test$Sales-linear_pred$fit)^2,na.rm = T))
rmse_linear # 260.9378 and Adjusted R2 Value = 31.59
expo_model<-lm(log_Sales~t,data=train)
summary(expo_model)
expo_pred<-data.frame(predict(expo_model,interval='predict',newdata=test))
rmse_expo<-sqrt(mean((test$Sales-exp(expo_pred$fit))^2,na.rm = T))
rmse_expo # 268.6938  and Adjusted R2 - 30.25 %
Quad_model<-lm(Sales~t+t_square,data=train)
summary(Quad_model)
Quad_pred<-data.frame(predict(Quad_model,interval='predict',newdata=test))
rmse_Quad<-sqrt(mean((test$Sales-Quad_pred$fit)^2,na.rm=T))
rmse_Quad # 297.4067 and Adjusted R2 - 30.48%
sea_add_model<-lm(Sales~Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov+Dec,data=train)
summary(sea_add_model)
sea_add_pred<-data.frame(predict(sea_add_model,newdata=test,interval='predict'))
rmse_sea_add<-sqrt(mean((test$Sales-sea_add_pred$fit)^2,na.rm = T))
rmse_sea_add # 235.6027 and Adjusted R2 Value = 69.85
Add_sea_Linear_model<-lm(Sales~t+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov+Dec,data=train)
summary(Add_sea_Linear_model)
Add_sea_Linear_pred<-data.frame(predict(Add_sea_Linear_model,interval='predict',newdata=test))
rmse_Add_sea_Linear<-sqrt(mean((test$Sales-Add_sea_Linear_pred$fit)^2,na.rm=T))
rmse_Add_sea_Linear # 135.5536 and Adjusted R2 - 96.45%
Add_sea_Quad_model<-lm(Sales~t+t_square+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov+Dec,data=train)
summary(Add_sea_Quad_model)
Add_sea_Quad_pred<-data.frame(predict(Add_sea_Quad_model,interval='predict',newdata=test))
rmse_Add_sea_Quad<-sqrt(mean((test$Sales-Add_sea_Quad_pred$fit)^2,na.rm=T))
rmse_Add_sea_Quad # 218.1939 and Adjusted R2 - 97.68 %
multi_sea_model<-lm(log_Sales~Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov+Dec,data = train)
summary(multi_sea_model)
multi_sea_pred<-data.frame(predict(multi_sea_model,newdata=test,interval='predict'))
rmse_multi_sea<-sqrt(mean((test$Sales-exp(multi_sea_pred$fit))^2,na.rm = T))
rmse_multi_sea # 239.6543
multi_add_sea_model<-lm(log_Sales~t+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov+Dec,data = train)
summary(multi_add_sea_model)
multi_add_sea_pred<-data.frame(predict(multi_add_sea_model,newdata=test,interval='predict'))
rmse_multi_add_sea<-sqrt(mean((test$Sales-exp(multi_add_sea_pred$fit))^2,na.rm = T))
rmse_multi_add_sea # 160.6833 and Adjusted R2 - 97.51%
table_rmse<-data.frame(c("rmse_linear","rmse_expo","rmse_Quad","rmse_sea_add","rmse_Add_sea_Quad","rmse_multi_sea","rmse_multi_add_sea"),c(rmse_linear,rmse_expo,rmse_Quad,rmse_sea_add,rmse_Add_sea_Quad,rmse_multi_sea,rmse_multi_add_sea))
View(table_rmse)
colnames(table_rmse)<-c("model","RMSE")
View(table_rmse)
new_model<-lm(log_Sales~t+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov+Dec,data = Plasticsdata)
new_model_pred<-data.frame(predict(new_model,newdata=Plasticsdata,interval='predict'))
new_model_fin <- exp(new_model$fitted.values)
View(new_model_fin)
Month <- as.data.frame(Plasticsdata$Month)
Final <- as.data.frame(cbind(Month,Plasticsdata$Sales, new_model_fin))
colnames(Final) <-c("Month","Sales","New_Pred_Value")
plot(Final$Sales,main = "ActualGraph", xlab="Sales(Actual)", ylab="Months",
col.axis="blue",type="o")
plot(Final$New_Pred_Value, main = "PredictedGraph", xlab="Sales(Predicted)", ylab="Months",
col.axis="Green",type="s")
plot(Final$New_Pred_Value, main = "PredictedGraph", xlab="Sales(Predicted)", ylab="Months",
col.axis="Green",type="s")
View(Final)
